import streamlit as st
import pandas as pd
from st_aggrid import AgGrid, GridOptionsBuilder, GridUpdateMode

# Definir a configura√ß√£o da p√°gina (DEVE SER A PRIMEIRA LINHA Streamlit)
st.set_page_config(layout="wide", page_title="Relat√≥rio de Recupera√ß√£o de Recursos")

# Carregar os dados
file_path = "Analise de RecuperacÃßaÃÉo - Financeira.xlsx"
df = pd.read_excel(file_path, sheet_name="Base Geral")

# Ajustar os tipos de dados
df["Dt. Entrega"] = pd.to_datetime(df["Dt. Entrega"], errors="coerce")
df["Dt Venc"] = pd.to_datetime(df["Dt Venc"], errors="coerce")
df["Vlr Devolu√ß√£o"] = pd.to_numeric(df["Vlr Devolu√ß√£o"], errors="coerce")
df["Vlr T√≠tulo"] = pd.to_numeric(df["Vlr T√≠tulo"], errors="coerce")

# Criar score de recupera√ß√£o diretamente
df["Score Recupera√ß√£o"] = (
    (df["Outras parc. pagas"] == "Sim").astype(int) * 3 +
    (df["Teve Devolu√ß√£o?"] == "N√£o").astype(int) * 2 +
    (df["Vlr Devolu√ß√£o"] == 0).astype(int) * 1 +
    ((pd.Timestamp.today() - df["Dt. Entrega"]).dt.days < 90).astype(int) * 2 +
    ((df["Teve Devolu√ß√£o?"] == "Sim") & (df["Vlr Devolu√ß√£o"] < df["Vlr T√≠tulo"])).astype(int) * 3
)

# Criar coluna de tempo da d√≠vida (dias desde o vencimento)
df["Tempo da D√≠vida"] = (pd.Timestamp.today() - df["Dt Venc"]).dt.days

# Remover valores n√£o vencidos (onde Tempo da D√≠vida √© negativo)
df = df[df["Tempo da D√≠vida"] >= 0]

# Criar faixas de tempo da d√≠vida
def categorize_debt_days(days):
    if days <= 15:
        return "1 - 15 dias"
    elif days <= 45:
        return "15 - 45 dias"
    elif days <= 90:
        return "46 - 90 dias"
    else:
        return "Acima de 91 dias"

df["Faixa de D√≠vida"] = df["Tempo da D√≠vida"].apply(categorize_debt_days)

# Aplica√ß√£o dos filtros
df_filtered = df.copy()
responsavel = st.sidebar.multiselect("Filtrar por Respons√°vel", df["Respons√°vel"].unique())
banco = st.sidebar.multiselect("Filtrar por Banco", df["Banco"].unique())
score = st.sidebar.slider("Filtrar por Score de Recupera√ß√£o", int(df["Score Recupera√ß√£o"].min()), int(df["Score Recupera√ß√£o"].max()), (int(df["Score Recupera√ß√£o"].min()), int(df["Score Recupera√ß√£o"].max())))
min_dias, max_dias = int(df["Tempo da D√≠vida"].min()), int(df["Tempo da D√≠vida"].max())
intervalo_tempo = st.sidebar.slider("Filtrar por Tempo da D√≠vida (dias)", min_dias, max_dias, (min_dias, max_dias))

if responsavel:
    df_filtered = df_filtered[df_filtered["Respons√°vel"].isin(responsavel)]
if banco:
    df_filtered = df_filtered[df_filtered["Banco"].isin(banco)]
df_filtered = df_filtered[(df_filtered["Score Recupera√ß√£o"] >= score[0]) & (df_filtered["Score Recupera√ß√£o"] <= score[1])]
df_filtered = df_filtered[(df_filtered["Tempo da D√≠vida"] >= intervalo_tempo[0]) & (df_filtered["Tempo da D√≠vida"] <= intervalo_tempo[1])]

# Criar resumo por cliente baseado nos filtros
df_clientes = df_filtered.groupby(["C√≥d Cli", "Cliente"]).agg({
    "Vlr T√≠tulo": ["sum", "mean"],
    "Vlr Devolu√ß√£o": "sum",
    "NFe": "count",
    "Tempo da D√≠vida": "mean",
    "Score Recupera√ß√£o": "mean",
    "Banco": lambda x: x.value_counts().idxmax(),
    "Teve Devolu√ß√£o?": lambda x: "Sim" if "Sim" in x.values else "N√£o"
}).reset_index()

df_clientes.columns = ["C√≥d Cli", "Cliente", "Soma Total de Valores em Aberto", "Valor M√©dio por T√≠tulo", "Soma Total de Devolu√ß√µes", "Qtd. T√≠tulos em Aberto", "M√©dia de Atraso (dias)", "Score M√©dio de Recupera√ß√£o", "Banco", "Teve Devolu√ß√£o?"]

# Exibir m√©tricas principais
st.title("üìä Relat√≥rio de Recupera√ß√£o de Recursos")
col1, col2, col3, col4 = st.columns(4)
col1.metric("Total de Clientes", df_filtered["Cliente"].nunique())
valor_total_pendente = df_filtered["Vlr T√≠tulo"].sum()
col2.metric("Valor Total Pendente", f"R$ {valor_total_pendente:,.2f}")
col3.metric("M√©dia de Score", round(df_filtered["Score Recupera√ß√£o"].mean(), 2))
col4.metric("M√©dia do Tempo da D√≠vida (dias)", round(df_filtered["Tempo da D√≠vida"].mean(), 2))

# Gr√°ficos
st.subheader("üìä Distribui√ß√£o do Score de Recupera√ß√£o")
st.bar_chart(df_filtered["Score Recupera√ß√£o"].value_counts().sort_index())

st.subheader("üè¶ Valor Total Pendente por Banco")
bank_summary = df_filtered.groupby("Banco")["Vlr T√≠tulo"].sum().sort_values(ascending=False)
st.bar_chart(bank_summary)

st.subheader("üïí Distribui√ß√£o por Faixa de D√≠vida")
st.bar_chart(df_filtered["Faixa de D√≠vida"].value_counts())

# Exibir tabelas baseadas nos filtros
st.subheader("üìå Valores Pendentes por Cliente")
gb = GridOptionsBuilder.from_dataframe(df_clientes)
gb.configure_selection("single", use_checkbox=True, pre_selected_keys=[])
gb.configure_pagination(paginationAutoPageSize=True)
selected = AgGrid(df_clientes, gridOptions=gb.build(), height=300, update_mode=GridUpdateMode.SELECTION_CHANGED, theme="streamlit")

if selected["selected_rows"]:
    cod_cli_selected = selected["selected_rows"][0]["C√≥d Cli"]
    df_detalhado_filtrado = df_filtered[df_filtered["C√≥d Cli"] == cod_cli_selected]
else:
    df_detalhado_filtrado = df_filtered

st.subheader("üìå Dados Detalhados")
st.dataframe(df_detalhado_filtrado, use_container_width=True)

# Op√ß√£o de Download dos Dados
st.sidebar.subheader("üì• Baixar Dados Filtrados")
st.sidebar.download_button("Baixar CSV", df_filtered.to_csv(index=False), file_name="relatorio_recuperacao.csv", mime="text/csv")

st.sidebar.info("Use os filtros para segmentar os dados e analisar melhor a recupera√ß√£o de recursos.")
